name: 📦 Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Create Release Notes
  generate-changelog:
    name: 📝 Generate Changelog
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📝 Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        
        if [ -z "$PREVIOUS_TAG" ]; then
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        echo "## 🚀 What's Changed" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # Get commits since last tag
        git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- %s (%h)" --no-merges >> CHANGELOG.md
        
        echo "" >> CHANGELOG.md
        echo "## 🔗 Full Changelog" >> CHANGELOG.md
        echo "https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG" >> CHANGELOG.md
        
        # Set output
        CHANGELOG=$(cat CHANGELOG.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  # Build Release Assets
  build-assets:
    name: 🏗️ Build Release Assets
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: 📦 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🏗️ Build application binaries
      run: |
        mkdir -p release
        
        # Build Go backend for multiple platforms
        cd authserver
        GOOS=linux GOARCH=amd64 go build -o ../release/go-auth-template-linux-amd64 cmd/server/main.go
        GOOS=darwin GOARCH=amd64 go build -o ../release/go-auth-template-darwin-amd64 cmd/server/main.go
        GOOS=darwin GOARCH=arm64 go build -o ../release/go-auth-template-darwin-arm64 cmd/server/main.go
        GOOS=windows GOARCH=amd64 go build -o ../release/go-auth-template-windows-amd64.exe cmd/server/main.go
        cd ..
        
        # Build frontend
        cd front-end
        npm ci
        npm run build
        tar -czf ../release/frontend-build.tar.gz .next
        cd ..

    - name: 📦 Create deployment package
      run: |
        mkdir -p release
        
        # Create deployment files
        cp docker-compose.yml release/
        cp docker-compose.prod.yml release/
        cp Dockerfile release/
        cp README.md release/
        
        # Create installation script
        cat > release/install.sh << 'EOF'
        #!/bin/bash
        echo "🚀 Installing Go Auth Template..."
        
        # Check if Docker is installed
        if ! command -v docker &> /dev/null; then
            echo "❌ Docker is required but not installed."
            exit 1
        fi
        
        # Check if Docker Compose is installed
        if ! command -v docker-compose &> /dev/null; then
            echo "❌ Docker Compose is required but not installed."
            exit 1
        fi
        
        echo "✅ Prerequisites check passed"
        echo "📋 Run 'docker-compose up -d' to start the application"
        echo "🌐 Frontend will be available at http://localhost:3000"
        echo "🔌 Backend API will be available at http://localhost:8080"
        EOF
        
        chmod +x release/install.sh

    - name: 📤 Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: release/

  # Create GitHub Release
  create-release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [generate-changelog, build-assets]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📥 Download release assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        path: release/

    - name: 📦 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: ${{ needs.generate-changelog.outputs.changelog }}
        files: |
          release/*
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify Release
  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: create-release
    if: always()
    
    steps:
    - name: 📢 Notify Slack
      uses: 8398a7/action-slack@v3
      if: env.SLACK_WEBHOOK_URL
      with:
        status: ${{ job.status }}
        text: |
          🎉 New release published!
          Version: ${{ github.ref_name }}
          Repository: ${{ github.repository }}
          Download: https://github.com/${{ github.repository }}/releases/latest
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: 📧 Create release announcement issue
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🎉 Release ${context.ref.replace('refs/tags/', '')} Published`,
            body: `A new release has been published: ${context.ref.replace('refs/tags/', '')}
            
            ## 📦 Download
            [Download the latest release](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/latest)
            
            ## 🚀 Quick Start
            \`\`\`bash
            # Download and extract
            curl -L https://github.com/${context.repo.owner}/${context.repo.repo}/releases/latest/download/install.sh | bash
            
            # Start with Docker Compose
            docker-compose up -d
            \`\`\`
            
            ## 📋 What's Included
            - Backend binaries for Linux, macOS, and Windows
            - Frontend build package
            - Docker Compose configurations
            - Installation scripts
            
            Thank you for using Go Auth Template! 🙏`,
            labels: ['release', 'announcement']
          })