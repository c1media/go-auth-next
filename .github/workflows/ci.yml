name: 🔧 CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # Backend Tests and Linting
  backend-test:
    name: 🐹 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐹 Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 📦 Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 📥 Download dependencies
      working-directory: ./authserver
      run: go mod download

    - name: 🔍 Run go vet
      working-directory: ./authserver
      run: go vet ./...

    - name: 🧪 Run tests
      working-directory: ./authserver
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db?sslmode=disable
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key-for-ci-cd-pipeline
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./authserver/coverage.out
        flags: backend

    - name: 🏗️ Build binary
      working-directory: ./authserver
      run: go build -o main cmd/server/main.go

  # Frontend Tests and Linting
  frontend-test:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: front-end/package-lock.json

    - name: 📥 Install dependencies
      working-directory: ./front-end
      run: npm ci

    - name: 🔍 Run ESLint
      working-directory: ./front-end
      run: npm run lint

    - name: 🔧 Type check
      working-directory: ./front-end
      run: npm run type-check

    - name: 🏗️ Build project
      working-directory: ./front-end
      env:
        API_URL: http://localhost:8080
        NEXT_PUBLIC_API_URL: http://localhost:8080
        NEXTAUTH_SECRET: test-secret-for-ci-cd
      run: npm run build

    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: front-end/.next
        retention-days: 1

  # Security Scanning
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build Test
  docker-build:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build application container
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: go-auth-template:test
        cache-from: type=gha
        cache-to: type=gha,mode=max